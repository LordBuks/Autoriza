// L√≥gica para a tela de detalhe do servi√ßo social
document.addEventListener('DOMContentLoaded', async function() {
  // Elementos da p√°gina
  const btnEnviarWhatsapp = document.getElementById('btn-enviar-whatsapp');
  const btnValidar = document.getElementById('btn-validar');
  const btnReprovar = document.getElementById('btn-reprovar');
  const mensagemWhatsapp = document.getElementById('mensagem-whatsapp');
  const textoWhatsapp = document.getElementById('texto-whatsapp');
  const btnCopiar = document.getElementById('btn-copiar');
  const btnAbrirWhatsapp = document.getElementById('btn-abrir-whatsapp');
  const btnFecharMensagem = document.getElementById('btn-fechar-mensagem');
  const modalObservacao = document.getElementById('modal-observacao');
  const btnConfirmar = document.getElementById('btn-confirmar');
  const btnCancelar = document.getElementById('btn-cancelar');
  
  // Vari√°veis de controle
  let solicitacaoAtual = null;
  let acaoAtual = null; // 'validar' ou 'reprovar'
  const DPO_EMAIL = 'dpo@internacional.com.br'; // Email do DPO para a mensagem
  
  // Obter ID da solicita√ß√£o da URL
  const urlParams = new URLSearchParams(window.location.search);
  const idSolicitacao = urlParams.get('id');
  
  if (!idSolicitacao) {
    alert('ID da solicita√ß√£o n√£o fornecido. Redirecionando para o painel.');
    window.location.href = 'dashboard.html';
    return;
  }
  
  // Carregar dados da solicita√ß√£o
  carregarSolicitacao(idSolicitacao);
  
  // Eventos dos bot√µes
  btnEnviarWhatsapp.addEventListener('click', function() {
    prepararMensagemWhatsapp();
    mensagemWhatsapp.style.display = 'block';
  });
  
  btnValidar.addEventListener('click', function() {
    acaoAtual = 'validar';
    modalObservacao.style.display = 'block';
  });
  
  btnReprovar.addEventListener('click', function() {
    acaoAtual = 'reprovar';
    modalObservacao.style.display = 'block';
  });
  
  btnConfirmar.addEventListener('click', function() {
    const observacao = document.getElementById('observacao').value;
    
    if (acaoAtual === 'validar') {
      validarAutorizacao(observacao);
    } else if (acaoAtual === 'reprovar') {
      reprovarAutorizacao(observacao);
    }
    
    modalObservacao.style.display = 'none';
  });
  
  btnCancelar.addEventListener('click', function() {
    modalObservacao.style.display = 'none';
  });
  
  btnCopiar.addEventListener('click', function() {
    textoWhatsapp.select();
    document.execCommand('copy');
    alert('Mensagem copiada para a √°rea de transfer√™ncia!');
  });
  
  btnAbrirWhatsapp.addEventListener('click', function() {
    if (!solicitacaoAtual) return;
    
    // Formatar n√∫mero de telefone (remover caracteres n√£o num√©ricos)
    const telefone = solicitacaoAtual.telefone_responsavel.replace(/\D/g, '');
    
    // Codificar a mensagem para URL
    const mensagem = encodeURIComponent(textoWhatsapp.value);
    
    // Abrir WhatsApp Web com o n√∫mero e mensagem
    const linkWhatsapp = window.whatsAppService.gerarLinkWhatsApp(telefone, mensagem);
    if (linkWhatsapp) {
      window.open(linkWhatsapp, "_blank");
    } else {
      alert("N√£o foi poss√≠vel gerar o link do WhatsApp. Verifique o n√∫mero de telefone.");
    }
  });
  
  btnFecharMensagem.addEventListener('click', function() {
    mensagemWhatsapp.style.display = 'none';
  });
  
  // Fun√ß√£o para carregar os dados da solicita√ß√£o
  async function carregarSolicitacao(id) {
    const solicitacao = await window.AutorizacaoService.buscarSolicitacao(id);
    
    if (!solicitacao) {
      alert('Solicita√ß√£o n√£o encontrada. Redirecionando para o painel.');
      window.location.href = 'dashboard.html';
      return;
    }
    
    // Armazenar a solicita√ß√£o atual
    solicitacaoAtual = solicitacao;
    
    // Preencher os dados na p√°gina
    document.getElementById('nome-atleta').textContent = solicitacao.nome;
    document.getElementById('categoria-atleta').textContent = solicitacao.categoria;
    document.getElementById('data-nascimento').textContent = formatarData(new Date(solicitacao.data_nascimento));
    document.getElementById('telefone-atleta').textContent = solicitacao.telefone;
    
    document.getElementById('data-saida').textContent = formatarData(new Date(solicitacao.data_saida));
    document.getElementById('horario-saida').textContent = solicitacao.horario_saida;
    document.getElementById('data-retorno').textContent = formatarData(new Date(solicitacao.data_retorno));
    document.getElementById('horario-retorno').textContent = solicitacao.horario_retorno;
    document.getElementById('motivo-destino').textContent = solicitacao.motivo_destino;
    
    document.getElementById('nome-responsavel').textContent = solicitacao.nome_responsavel;
    document.getElementById('telefone-responsavel').textContent = solicitacao.telefone_responsavel;
    
    const statusSupervisor = document.getElementById('status-supervisor');
    statusSupervisor.textContent = solicitacao.status_supervisor;
    
    // Ajustar a classe do badge de acordo com o status
    if (solicitacao.status_supervisor === 'Aprovado') {
      statusSupervisor.className = 'badge badge-approved';
    } else if (solicitacao.status_supervisor === 'Reprovado') {
      statusSupervisor.className = 'badge badge-rejected';
    } else {
      statusSupervisor.className = 'badge badge-pending';
    }
    
    document.getElementById('data-aprovacao-supervisor').textContent = 
      solicitacao.data_aprovacao_supervisor ? 
      formatarData(new Date(solicitacao.data_aprovacao_supervisor)) : 
      'N/A';
    
    const statusAtual = document.getElementById('status-atual');
    statusAtual.textContent = solicitacao.status_servico_social;
    
    // Ajustar a classe do badge de acordo com o status
    if (solicitacao.status_servico_social === 'Aprovado') {
      statusAtual.className = 'badge badge-approved';
      // Desabilitar bot√µes se j√° aprovado
      btnValidar.disabled = true;
      btnReprovar.disabled = true;
    } else if (solicitacao.status_servico_social === 'Reprovado') {
      statusAtual.className = 'badge badge-rejected';
      // Desabilitar bot√µes se j√° reprovado
      btnValidar.disabled = true;
      btnReprovar.disabled = true;
    } else {
      statusAtual.className = 'badge badge-pending';
    }
  }
  
  // Fun√ß√£o para preparar a mensagem de WhatsApp
  function prepararMensagemWhatsapp() {
    if (!solicitacaoAtual) return;
    
    // Fun√ß√£o para formatar data no formato dd/MM/yyyy
    function fmt(dataStr, formato) {
      const data = new Date(dataStr);
      if (formato === "dd/MM/yyyy") {
        return data.toLocaleDateString('pt-BR');
      } else if (formato === "HH:mm") {
        return data.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
      }
      return dataStr;
    }
    
    // Construir a mensagem conforme o modelo fornecido pelo usu√°rio
    const mensagem = `Prezado(a) ${solicitacaoAtual.nome_responsavel || 'Respons√°vel'},

Informamos que o(a) atleta abaixo solicitou autoriza√ß√£o de sa√≠da, conforme Lei Pel√© (Art. 29) e LGPD (Lei n¬∫ 13.709/2018):

üôãüèΩ Nome: ${solicitacaoAtual.nome}
üìÖ Sa√≠da: ${fmt(solicitacaoAtual.data_saida, "dd/MM/yyyy")} √†s ${solicitacaoAtual.horario_saida}
üìÖ Retorno: ${fmt(solicitacaoAtual.data_retorno, "dd/MM/yyyy")} √†s ${solicitacaoAtual.horario_retorno}
üìç Destino: ${solicitacaoAtual.motivo_destino}

Para autorizar, responda com a seguinte declara√ß√£o:
*Eu, ${solicitacaoAtual.nome_responsavel || '[seu nome]'}, autorizo o(a) atleta ${solicitacaoAtual.nome} a sair e retornar ao alojamento conforme informado, em conformidade com a Lei Pel√© e LGPD.*

Seus dados ser√£o protegidos conforme nossa pol√≠tica de privacidade. Contato do DPO: ${DPO_EMAIL}.

Atenciosamente,
Servi√ßo Social - Sport Club Internacional`;
    
    textoWhatsapp.value = mensagem;
  }
  
  // Fun√ß√£o para validar a autoriza√ß√£o
  async function validarAutorizacao(observacao) {
    if (!solicitacaoAtual) return;
    
    try {
      const resultado = await window.AutorizacaoService.atualizarStatus(
        solicitacaoAtual.id,
        'servico_social',
        'Aprovado',
        observacao
      );

      if (resultado.sucesso) {
        alert('Autoriza√ß√£o validada com sucesso!');
        window.location.reload();
      } else {
        alert(`Erro ao validar autoriza√ß√£o: ${resultado.mensagem}`);
      }
    } catch (error) {
      console.error('Erro ao validar autoriza√ß√£o:', error);
      alert('Ocorreu um erro ao validar a autoriza√ß√£o. Tente novamente.');
    }
  }
  
  // Fun√ß√£o para reprovar a autoriza√ß√£o
  async function reprovarAutorizacao(observacao) {
    if (!solicitacaoAtual) return;
    
    // Verificar se a observa√ß√£o foi fornecida (obrigat√≥ria para reprova√ß√£o)
    if (!observacao.trim()) {
      alert("√â necess√°rio fornecer um motivo para a reprova√ß√£o.");
      return;
    }

    try {
      const resultado = await window.AutorizacaoService.atualizarStatus(
        solicitacaoAtual.id,
        "servico_social",
        "Reprovado",
        observacao
      );

      if (resultado.sucesso) {
        alert("Autoriza√ß√£o reprovada.");
        window.location.reload();
      } else {
        alert(`Erro ao reprovar autoriza√ß√£o: ${resultado.mensagem}`);
      }
    } catch (error) {
      console.error("Erro ao reprovar autoriza√ß√£o:", error);
      alert("Ocorreu um erro ao reprovar a autoriza√ß√£o. Tente novamente.");
    }
  }
  
  // Fun√ß√£o para gerar hash √∫nico para valida√ß√£o legal
  // function gerarHashUnico(dados) {
  //   // Em um sistema real, usar√≠amos um algoritmo de hash criptogr√°fico
  //   // Aqui, vamos simular um hash baseado nos dados e timestamp
  //   const timestamp = new Date().getTime();
  //   const randomStr = Math.random().toString(36).substring(2, 15);
  //   return `HASH-${timestamp}-${randomStr}-${dados.id}`;
  // }
  
  // Fun√ß√£o para arquivar a autoriza√ß√£o
  // function arquivarAutorizacao(dados, tipo) {
  //   // Em um sistema real, salvar√≠amos em um banco de dados ou sistema de arquivos
  //   // Aqui, vamos simular o arquivamento no localStorage
    
  //   // Recuperar arquivos existentes ou inicializar objeto vazio
  //   let arquivos = JSON.parse(localStorage.getItem("arquivos")) || {};
    
  //   // Inicializar a categoria se n√£o existir
  //   if (!arquivos[tipo]) {
  //     arquivos[tipo] = [];
  //   }
    
  //   // Adicionar data e hora de arquivamento
  //   const dadosArquivados = {
  //     ...dados,
  //     data_arquivamento: new Date().toISOString(),
  //     id_arquivo: `${tipo.toUpperCase()}-${new Date().getTime()}-${dados.id}`
  //   };
    
  //   // Adicionar ao arquivo
  //   arquivos[tipo].push(dadosArquivados);
    
  //   // Salvar no localStorage
  //   localStorage.setItem("arquivos", JSON.stringify(arquivos));
    
  //   console.log(`Autoriza√ß√£o ${dados.id} arquivada em ${tipo}`);
  // }
  
  // Fun√ß√£o para formatar data
  function formatarData(data) {
    return data.toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }
});
